// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
 url      = env("DATABASE_URL")
 }

// Role: Quản lý vai trò người dùng (Guest, Customer, Consultant, v.v.)
model Role {
  role_id     String   @id @default(uuid()) @db.Char(36)
  name        String   @unique @db.VarChar(50)
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  users       User[]   // Quan hệ 1-nhiều với User
  permissions RolePermission[] // Quan hệ 1-nhiều với RolePermission
}

// Permission: Quản lý quyền (view_homepage, manage_users, v.v.)
model Permission {
  permission_id String   @id @default(uuid()) @db.Char(36)
  name          String   @unique @db.VarChar(100)
  description   String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  roles         RolePermission[] // Quan hệ 1-nhiều với RolePermission
}

// RolePermission: Liên kết vai trò và quyền (RBAC)
model RolePermission {
  role_id       String   @db.Char(36)
  permission_id String   @db.Char(36)
  role          Role     @relation(fields: [role_id], references: [role_id])
  permission    Permission @relation(fields: [permission_id], references: [permission_id])
  created_at    DateTime @default(now())

  @@id([role_id, permission_id])
  @@index([role_id, permission_id])
}

// User: Quản lý tài khoản người dùng
model User {
  user_id        String            @id @default(uuid()) @db.Char(36)
  email          String            @unique @db.VarChar(255)
  password_hash  String            @db.VarChar(255)
  role_id        String            @db.Char(36)
  role           Role              @relation(fields: [role_id], references: [role_id])
  full_name      String?           @db.VarChar(100)
  phone_number   String?           @db.VarChar(20)
  address        String?
  is_verified    Boolean           @default(false)
  is_active      Boolean           @default(true)
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt
  deleted_at     DateTime?
  customer       CustomerProfile?  // Quan hệ 1-1 với CustomerProfile
  consultant     ConsultantProfile? // Quan hệ 1-1 với ConsultantProfile
  tokens         Token[]           // Quan hệ 1-nhiều với Token
  appointments   Appointment[]     // Quan hệ 1-nhiều với Appointment
  questions      Question[]        // Quan hệ 1-nhiều với Question
  feedback       Feedback[]        // Quan hệ 1-nhiều với Feedback
  blog_posts     BlogPost[]        // Quan hệ 1-nhiều với BlogPost
  blog_comments  BlogComment[]     // Quan hệ 1-nhiều với BlogComment
  notifications  Notification[]    // Quan hệ 1-nhiều với Notification
  reports        Report[]          // Quan hệ 1-nhiều với Report
  audit_logs     AuditLog[]        // Quan hệ 1-nhiều với AuditLog
  payments       Payment[]         // Quan hệ 1-nhiều với Payment
  menstrual_cycles MenstrualCycle[] // Quan hệ ngược với MenstrualCycle

  @@index([email])
  @@index([role_id])
}

// Token: Quản lý refresh token cho xác thực
model Token {
  token_id          String   @id @default(uuid()) @db.Char(36)
  user_id           String   @db.Char(36)
  user              User     @relation(fields: [user_id], references: [user_id])
  refresh_token_hash String   @db.VarChar(255)
  expires_at        DateTime
  is_revoked        Boolean  @default(false)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  deleted_at        DateTime?

  @@index([user_id, is_revoked])
}

// CustomerProfile: Hồ sơ khách hàng
model CustomerProfile {
  profile_id       String   @id @default(uuid()) @db.Char(36)
  user_id          String   @unique @db.Char(36)
  user             User     @relation(fields: [user_id], references: [user_id])
  date_of_birth    DateTime?
  gender           String?  @db.VarChar(10) // Enum: Male, Female, Other
  medical_history  String?
  privacy_settings Json?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  deleted_at       DateTime?
}

// ConsultantProfile: Hồ sơ tư vấn viên
model ConsultantProfile {
  consultant_id String    @id @default(uuid()) @db.Char(36)
  user_id       String    @unique @db.Char(36)
  user          User      @relation(fields: [user_id], references: [user_id])
  qualifications String?
  experience    String?
  specialization String?   @db.VarChar(100)
  is_verified   Boolean   @default(false)
  average_rating Float?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?
  appointments  Appointment[] // Quan hệ 1-nhiều với Appointment
  questions     Question[]    // Quan hệ 1-nhiều với Question
  feedback      Feedback[]    // Quan hệ 1-nhiều với Feedback

  @@index([is_verified])
}

// MenstrualCycle: Theo dõi chu kỳ kinh nguyệt
model MenstrualCycle {
  cycle_id             String   @id @default(uuid()) @db.Char(36)
  user_id             String   @db.Char(36)
  user                User     @relation(fields: [user_id], references: [user_id])
  start_date          DateTime
  cycle_length        Int?
  period_length       Int?
  symptoms            String?
  notes               String?
  ovulation_date      DateTime?
  pregnancy_probability Float?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  deleted_at          DateTime?

  @@index([user_id, start_date])
}

// Service: Quản lý dịch vụ (xét nghiệm STIs, tư vấn)
model Service {
  service_id  String    @id @default(uuid()) @db.Char(36)
  name        String    @db.VarChar(100)
  description String?
  price       Decimal   @db.Decimal(10, 2)
  category    String?   @db.VarChar(50)
  is_active   Boolean   @default(true)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?
  test_results TestResult[] // Quan hệ 1-nhiều với TestResult
  feedback    Feedback[]    // Quan hệ 1-nhiều với Feedback

  @@index([category, is_active])
}

// Appointment: Quản lý lịch hẹn (tư vấn, xét nghiệm)
model Appointment {
  appointment_id    String        @id @default(uuid()) @db.Char(36)
  user_id           String        @db.Char(36)
  user              User          @relation(fields: [user_id], references: [user_id])
  consultant_id     String?       @db.Char(36)
  consultant        ConsultantProfile? @relation(fields: [consultant_id], references: [consultant_id])
  type              String        @db.VarChar(20) // Enum: Consultation, Testing
  start_time        DateTime
  end_time          DateTime
  status            String        @default("Pending") @db.VarChar(20) // Enum: Pending, Confirmed, Completed, Cancelled
  location          String?       @db.VarChar(255)
  payment_status    String        @default("Pending") @db.VarChar(20) // Enum: Pending, Paid, Failed
  consultation_notes String?
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  deleted_at        DateTime?
  test_result       TestResult?   // Quan hệ 1-1 với TestResult
  payments          Payment[]     // Quan hệ 1-nhiều với Payment

  @@index([user_id, start_time])
  @@index([consultant_id, start_time])
  @@index([status])
}

// TestResult: Kết quả xét nghiệm STIs
model TestResult {
  result_id     String    @id @default(uuid()) @db.Char(36)
  appointment_id String    @unique @db.Char(36)
  appointment   Appointment @relation(fields: [appointment_id], references: [appointment_id])
  service_id    String    @db.Char(36)
  service       Service   @relation(fields: [service_id], references: [service_id])
  result_data   String
  status        String    @default("Pending") @db.VarChar(20) // Enum: Pending, Processing, Completed
  notes         String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  @@index([status])
}

// Question: Quản lý hỏi đáp
model Question {
  question_id   String    @id @default(uuid()) @db.Char(36)
  user_id       String    @db.Char(36)
  user          User      @relation(fields: [user_id], references: [user_id])
  consultant_id String?   @db.Char(36)
  consultant    ConsultantProfile? @relation(fields: [consultant_id], references: [consultant_id])
  title         String    @db.VarChar(255)
  content       String
  is_public     Boolean   @default(false)
  is_anonymous  Boolean   @default(false)
  status        String    @default("Pending") @db.VarChar(20) // Enum: Pending, Answered, Rejected
  answer        String?
  category      String?   @db.VarChar(50)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  @@index([user_id, status])
  @@index([consultant_id, status])
}

// Feedback: Quản lý đánh giá và phản hồi
model Feedback {
  feedback_id   String    @id @default(uuid()) @db.Char(36)
  user_id       String    @db.Char(36)
  user          User      @relation(fields: [user_id], references: [user_id])
  consultant_id String?   @db.Char(36)
  consultant    ConsultantProfile? @relation(fields: [consultant_id], references: [consultant_id])
  service_id    String?   @db.Char(36)
  service       Service?  @relation(fields: [service_id], references: [service_id])
  rating        Int
  comment       String?
  is_public     Boolean   @default(false)
  is_anonymous  Boolean   @default(false)
  status        String    @default("Pending") @db.VarChar(20) // Enum: Pending, Approved, Rejected
  response      String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  @@index([user_id, status])
  @@index([consultant_id, status])
}

// BlogPost: Quản lý bài viết blog
model BlogPost {
  post_id        String       @id @default(uuid()) @db.Char(36)
  title          String       @db.VarChar(255)
  content        String
  category       String?      @db.VarChar(50)
  author_id      String       @db.Char(36)
  author         User         @relation(fields: [author_id], references: [user_id])
  is_published   Boolean      @default(false)
  views_count    Int          @default(0)
  meta_title     String?      @db.VarChar(255)
  meta_description String?
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  deleted_at     DateTime?
  comments       BlogComment[] // Quan hệ 1-nhiều với BlogComment

  @@index([category, is_published])
}

// BlogComment: Quản lý bình luận bài viết blog
model BlogComment {
  comment_id String   @id @default(uuid()) @db.Char(36)
  post_id    String   @db.Char(36)
  post       BlogPost @relation(fields: [post_id], references: [post_id])
  user_id    String   @db.Char(36)
  user       User     @relation(fields: [user_id], references: [user_id])
  content    String
  status     String   @default("Pending") @db.VarChar(20) // Enum: Pending, Approved, Rejected
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?

  @@index([post_id, status])
}

// Notification: Quản lý thông báo
model Notification {
  notification_id String   @id @default(uuid()) @db.Char(36)
  user_id         String   @db.Char(36)
  user            User     @relation(fields: [user_id], references: [user_id])
  type            String   @db.VarChar(20) // Enum: Email, Push, SMS
  title           String   @db.VarChar(255)
  content         String
  status          String   @default("Pending") @db.VarChar(20) // Enum: Pending, Sent, Failed
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  deleted_at      DateTime?

  @@index([user_id, status])
}

// Report: Quản lý báo cáo
model Report {
  report_id  String   @id @default(uuid()) @db.Char(36)
  type       String   @db.VarChar(20) // Enum: Appointment, Testing, Revenue, Consultant
  data       Json
  start_date DateTime
  end_date   DateTime
  created_by String   @db.Char(36)
  creator    User     @relation(fields: [created_by], references: [user_id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?

  @@index([type, start_date])
}

// AuditLog: Ghi nhật ký hoạt động
model AuditLog {
  log_id      String   @id @default(uuid()) @db.Char(36)
  user_id     String   @db.Char(36)
  user        User     @relation(fields: [user_id], references: [user_id])
  action      String   @db.VarChar(100)
  entity_type String   @db.VarChar(50)
  entity_id   String   @db.Char(36)
  details     Json?
  created_at  DateTime @default(now())
}

// Payment: Quản lý lịch sử thanh toán và hoàn trả
model Payment {
  payment_id     String   @id @default(uuid()) @db.Char(36)
  appointment_id String   @db.Char(36)
  appointment    Appointment @relation(fields: [appointment_id], references: [appointment_id])
  user_id        String   @db.Char(36)
  user           User     @relation(fields: [user_id], references: [user_id])
  amount         Decimal  @db.Decimal(10, 2)
  payment_method String   @db.VarChar(20) // Enum: BankCard, MobileApp, Cash
  status         String   @default("Pending") @db.VarChar(20) // Enum: Pending, Completed, Failed, Refunded
  refund_amount  Decimal? @db.Decimal(10, 2)
  refund_reason  String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@index([appointment_id, status])
  @@index([user_id, status])
}