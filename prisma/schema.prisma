generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Định nghĩa các ENUM
enum Role {
  Guest
  Customer
  Consultant
  Staff
  Manager
  Admin
  System
}

enum Gender {
  Male
  Female
  Other
}

enum AppointmentType {
  Consultation
  Testing
}

enum AppointmentStatus {
  Pending
  Confirmed
  SampleCollected
  Completed
  Cancelled
}

enum PaymentStatus {
  Pending
  Paid
  Failed
}

enum TestResultStatus {
  Pending
  Processing
  Completed
}

enum QuestionStatus {
  Pending
  Answered
  Deleted
}

enum BlogCommentStatus {
  Pending
  Approved
  Rejected
}

enum FeedbackStatus {
  Pending
  Approved
  Rejected
}

enum NotificationType {
  Email
  Push
}

enum NotificationStatus {
  Pending
  Sent
  Failed
}

enum ReportType {
  Appointment
  Testing
  Revenue
  Consultant
}

enum PaymentMethod {
  BankCard
  MobileApp
  Cash
}

enum PaymentTransactionStatus {
  Pending
  Completed
  Failed
  Refunded
  Cancelled
}

enum ServiceType {
  Consultation
  Testing
}

enum ServiceMode {
  AT_HOME
  AT_CLINIC
}

enum ShippingStatus {
  Pending
  Shipped
  DeliveredToCustomer
  PickupRequested
  SampleInTransit
  ReturnedToLab
  Failed
}


// User: Quản lý tài khoản người dùng
model User {
  user_id                    String                     @id @default(uuid()) @db.Char(36)
  email                      String                     @unique @db.VarChar(255)
  password_hash              String                     @db.VarChar(255)
  role                       Role                       @default(Customer)
  full_name                  String?                    @db.VarChar(100)
  image                      String?                    @db.VarChar(255)
  phone_number               String?                    @db.VarChar(20)
  address                    String?
  is_verified                Boolean                    @default(false)
  is_active                  Boolean                    @default(true)
  created_at                 DateTime                   @default(now())
  updated_at                 DateTime                   @updatedAt
  deleted_at                 DateTime?
  customer                   CustomerProfile? // Quan hệ 1-1 với CustomerProfile
  consultant                 ConsultantProfile? // Quan hệ 1-1 với ConsultantProfile
  tokens                     Token[] // Quan hệ 1-nhiều với Token
  appointments               Appointment[] // Quan hệ 1-nhiều với Appointment
  questions                  Question[] // Quan hệ 1-nhiều với Question
  feedback                   Feedback[] // Quan hệ 1-nhiều với Feedback
  blog_posts                 BlogPost[] // Quan hệ 1-nhiều với BlogPost
  blog_comments              BlogComment[] // Quan hệ 1-nhiều với BlogComment
  notifications              Notification[] // Quan hệ 1-nhiều với Notification
  reports                    Report[] // Quan hệ 1-nhiều với Report
  audit_logs                 AuditLog[] // Quan hệ 1-nhiều với AuditLog
  payments                   Payment[] // Quan hệ 1-nhiều với Payment
  menstrual_cycles           MenstrualCycle[] // Quan hệ ngược với MenstrualCycle
  appointment_status_history AppointmentStatusHistory[] // Quan hệ ngược
  test_result_status_history TestResultStatusHistory[] // Quan hệ ngược

  @@index([email])
  @@index([role, is_active, created_at]) 
}

// Token: Quản lý refresh token cho xác thực
model Token {
  token_id           String    @id @default(uuid()) @db.Char(36)
  user_id            String    @db.Char(36)
  user               User      @relation(fields: [user_id], references: [user_id])
  refresh_token_hash String    @db.Text
  expires_at         DateTime
  is_revoked         Boolean   @default(false)
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  deleted_at         DateTime?

  @@index([user_id, is_revoked])
}

// CustomerProfile: Hồ sơ khách hàng
model CustomerProfile {
  profile_id       String    @id @default(uuid()) @db.Char(36)
  user_id          String    @unique @db.Char(36)
  user             User      @relation(fields: [user_id], references: [user_id])
  date_of_birth    DateTime?
  gender           Gender? // Sử dụng ENUM
  medical_history  String?
  privacy_settings Json?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  deleted_at       DateTime?
}

// ConsultantProfile: Hồ sơ tư vấn viên
model ConsultantProfile {
  consultant_id  String        @id @default(uuid()) @db.Char(36)
  user_id        String        @unique @db.Char(36)
  user           User          @relation(fields: [user_id], references: [user_id])
  qualifications String?
  experience     String?
  specialization String?       @db.VarChar(100)
  is_verified    Boolean       @default(false)
  average_rating Float?
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  deleted_at     DateTime?
  appointments   Appointment[] // Quan hệ 1-nhiều với Appointment
  questions      Question[] // Quan hệ 1-nhiều với Question
  feedback       Feedback[] // Quan hệ 1-nhiều với Feedback
  schedules      Schedule[]    @relation("ConsultantSchedule") 
  @@index([is_verified, specialization])
}

// MenstrualCycle: Theo dõi chu kỳ kinh nguyệt
model MenstrualCycle {
  cycle_id              String    @id @default(uuid()) @db.Char(36)
  user_id               String    @db.Char(36)
  user                  User      @relation(fields: [user_id], references: [user_id])
  start_date            DateTime
  is_predicted Boolean?  // Chu kỳ được hệ thống dự đoán (dự báo tự động)
  cycle_length          Int?
  period_length         Int?
  symptoms              String?
  notes                 String?
  ovulation_date        DateTime?
  pregnancy_probability Float?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  deleted_at            DateTime?

  @@index([user_id, start_date])
  @@index([start_date]) 
}

// Service: Quản lý dịch vụ (xét nghiệm STIs, tư vấn)
model Service {
  service_id     String        @id @default(uuid()) @db.Char(36)
  name           String        @db.VarChar(100)
  description    String?
  price          Decimal       @db.Decimal(10, 2)
  category       String?       @db.VarChar(50)
  is_active      Boolean       @default(true)
  type           ServiceType   @default(Testing)
  testing_hours  Json?         // { "morning": { "start": "07:00", "end": "11:00" }, "afternoon": { "start": "13:00", "end": "17:00" } }
  daily_capacity Int?          // Số lượng lịch hẹn tối đa mỗi ngày
  return_address String?      @db.VarChar(255) // Địa chỉ nhận mẫu
  return_phone   String?      @db.VarChar(20)  // Số điện thoại liên hệ
  available_modes Json? //  Mảng JSON gồm: ["AT_HOME", "AT_CLINIC"]

  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  deleted_at     DateTime?
  test_results   TestResult[]  // Quan hệ 1-nhiều với TestResult
  feedback       Feedback[]    // Quan hệ 1-nhiều với Feedback
  schedules      Schedule[]    @relation("ServiceSchedule")
  appointments   Appointment[] @relation("ServiceAppointment")

  @@index([category, is_active])
}
// Appointment: Quản lý lịch hẹn (tư vấn, xét nghiệm)
model Appointment {
  appointment_id                String                     @id @default(uuid()) @db.Char(36)
  user_id                       String                     @db.Char(36)
  user                          User                       @relation(fields: [user_id], references: [user_id])
  consultant_id                 String?                    @db.Char(36)
  consultant                    ConsultantProfile?         @relation(fields: [consultant_id], references: [consultant_id])
  type                          AppointmentType
  start_time                    DateTime
  end_time                      DateTime
  status                        AppointmentStatus          @default(Pending)
  location                      String?                    @db.VarChar(255)
  payment_status                PaymentStatus              @default(Pending)
  is_free_consultation          Boolean                    @default(false)
  consultation_notes            String?
  created_at                    DateTime                   @default(now())
  updated_at                    DateTime                   @updatedAt
  deleted_at                    DateTime?
  test_result                   TestResult?
  payments                      Payment[]
  service_id                    String?                    @db.Char(36)
  service                       Service?                   @relation(fields: [service_id], references: [service_id], name: "ServiceAppointment")
  schedule_id                   String?                    @unique @db.Char(36)
  schedule                      Schedule?                  @relation(fields: [schedule_id], references: [schedule_id], name: "AppointmentToSchedule")
  status_history                AppointmentStatusHistory[] 
  related_appointment_id        String?                    @db.Char(36)
  free_consultation_valid_until DateTime?                  
  payment_refunded              Boolean                    @default(false)
  sample_collected_date         DateTime? 
  shipping_info                 ShippingInfo?              
  return_shipping_info ReturnShippingInfo?  // Chiều trả mẫu
  mode ServiceMode? 
  @@index([mode])
  @@index([status, created_at]) // Hỗ trợ lọc trạng thái và thời gian trong appointments/stats
  @@index([service_id, user_id]) // Hỗ trợ customers/service-usage và services/stats
  @@index([consultant_id]) // Tối ưu join với ConsultantProfile trong feedback/stats

}

model ShippingInfo {
  id                   String           @id @default(uuid()) @db.Char(36)
  appointment_id       String           @unique
  appointment          Appointment      @relation(fields: [appointment_id], references: [appointment_id])
  provider             String           // 'GHN'
  provider_order_code  String?          // order_code trả về từ GHN
  shipping_status      ShippingStatus

  contact_name         String
  contact_phone        String
  shipping_address     String           // Số nhà, tên đường
  province             String
  district             String
  ward                 String

  expected_delivery_time DateTime?      // ← GHN trả về
  label_url            String?          // ← GHN trả về (link PDF)
  deleted_at           DateTime?
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt
}


model ReturnShippingInfo {
  id                    String        @id @default(uuid()) @db.Char(36)
  appointment_id        String        @unique
  appointment           Appointment   @relation(fields: [appointment_id], references: [appointment_id])
  provider              String
  provider_order_code   String?
  shipping_status         ShippingStatus
  contact_name          String
  contact_phone         String
  pickup_address        String
  pickup_province       String
  pickup_district       String
  pickup_ward           String
  deleted_at            DateTime?
  created_at            DateTime      @default(now())
  updated_at            DateTime      @updatedAt
}



model AppointmentStatusHistory {
  history_id      String            @id @default(uuid()) @db.Char(36)
  appointment_id  String            @db.Char(36)
  appointment     Appointment       @relation(fields: [appointment_id], references: [appointment_id])
  status          AppointmentStatus
  notes           String?           @db.VarChar(255)
  changed_at      DateTime          @default(now())
  changed_by      String            @db.Char(36)
  changed_by_user User              @relation(fields: [changed_by], references: [user_id])
  deleted_at      DateTime?
  @@index([appointment_id, changed_at])
}

model TestResult {
  result_id      String                    @id @default(uuid()) @db.Char(36)
  test_code      String                    @unique @db.VarChar(36)
  appointment_id String                    @unique @db.Char(36)
  appointment    Appointment               @relation(fields: [appointment_id], references: [appointment_id])
  service_id     String                    @db.Char(36)
  service        Service                   @relation(fields: [service_id], references: [service_id])
  result_data    String
  is_abnormal    Boolean                   @default(false)
  status         TestResultStatus          @default(Pending)
  notes          String?
  created_at     DateTime                  @default(now())
  updated_at     DateTime                  @updatedAt
  deleted_at     DateTime?
  status_history TestResultStatusHistory[] // Quan hệ ngược
  viewed_at      DateTime?

  @@index([status])
  @@index([viewed_at])
  @@index([status, created_at]) 
}

model TestResultStatusHistory {
  history_id      String           @id @default(uuid()) @db.Char(36)
  result_id       String           @db.Char(36)
  test_result     TestResult       @relation(fields: [result_id], references: [result_id])
  status          TestResultStatus
  notes           String?          @db.VarChar(255)
  changed_at      DateTime         @default(now())
  changed_by      String           @db.Char(36)
  changed_by_user User             @relation(fields: [changed_by], references: [user_id])
  deleted_at      DateTime?
  @@index([result_id, changed_at])
}

model Question {
  question_id   String             @id @default(uuid()) @db.Char(36)
  user_id       String             @db.Char(36)
  user          User               @relation(fields: [user_id], references: [user_id])
  consultant_id String            @db.Char(36)
  consultant    ConsultantProfile? @relation(fields: [consultant_id], references: [consultant_id])
  title         String             @db.VarChar(255)
  content       String             @db.Text
  is_public     Boolean            @default(false)
  is_anonymous  Boolean            @default(false)
  image_url     String?        @db.VarChar(255)
  status        QuestionStatus     @default(Pending)
  answer        String?            @db.Text
  category      String?            @db.VarChar(50)
  created_at    DateTime           @default(now())
  updated_at    DateTime           @updatedAt
  deleted_at    DateTime?
  @@index([user_id, status, consultant_id  ])
  @@index([status, category, consultant_id])

}

model Feedback {
  feedback_id    String             @id @default(uuid()) @db.Char(36)
  user_id        String             @db.Char(36)
  user           User               @relation(fields: [user_id], references: [user_id])
  consultant_id  String?            @db.Char(36)
  consultant     ConsultantProfile? @relation(fields: [consultant_id], references: [consultant_id])
  service_id     String?            @db.Char(36)
  service        Service?           @relation(fields: [service_id], references: [service_id])
  rating         Int
  comment        String?            @db.Text
  is_public      Boolean            @default(false)
  is_anonymous   Boolean            @default(false)
  status         FeedbackStatus     @default(Pending)
  response       String?
  created_at     DateTime           @default(now())
  updated_at     DateTime           @updatedAt
  deleted_at     DateTime?
  appointment_id String?            @db.Char(36) // Xóa @relation, chỉ giữ tham chiếu

  @@index([user_id, status])
  @@index([consultant_id, status])
  @@index([status, created_at]) 
}

model BlogPost {
  post_id          String        @id @default(uuid()) @db.Char(36)
  title            String        @db.VarChar(255)
  content          String        @db.Text
  category         String?       @db.VarChar(50)
  author_id        String        @db.Char(36)
  author           User          @relation(fields: [author_id], references: [user_id])
  is_published     Boolean       @default(false)
  views_count      Int           @default(0)
  meta_title       String?       @db.VarChar(255)
  meta_description String?
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  deleted_at       DateTime?
  comments         BlogComment[] @relation("BlogPostComments") // Quan hệ 1-nhiều với BlogComment, đặt tên quan hệ

  @@index([category, is_published])
}

model BlogComment {
  comment_id String            @id @default(uuid()) @db.Char(36)
  post_id    String            @db.Char(36)
  user_id    String            @db.Char(36)
  parent_id  String?           @db.Char(36) // Thêm trường cho bình luận cha, null nếu là bình luận gốc
  user       User              @relation(fields: [user_id], references: [user_id])
  parent     BlogComment?      @relation("CommentReplies", fields: [parent_id], references: [comment_id])
  replies    BlogComment[]     @relation("CommentReplies") // Quan hệ ngược cho các phản hồi
  post       BlogPost          @relation("BlogPostComments", fields: [post_id], references: [post_id]) // Quan hệ ngược với BlogPost
  content    String            @db.Text
  status     BlogCommentStatus @default(Pending)
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
  deleted_at DateTime?

  @@index([post_id]) // Loại bỏ status khỏi index
}

model Notification {
  notification_id String             @id @default(uuid()) @db.Char(36)
  user_id         String             @db.Char(36)
  user            User               @relation(fields: [user_id], references: [user_id])
  type            NotificationType // Sử dụng ENUM
  title           String             @db.VarChar(255)
  content         String             @db.Text
  status          NotificationStatus @default(Pending)
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt
  deleted_at      DateTime?

  @@index([user_id, status])
}

model Report {
  report_id  String     @id @default(uuid()) @db.Char(36)
  type       ReportType // Sử dụng ENUM
  data       Json
  start_date DateTime
  end_date   DateTime
  created_by String     @db.Char(36)
  creator    User       @relation(fields: [created_by], references: [user_id])
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  deleted_at DateTime?

  @@index([type, start_date])
}

model AuditLog {
  log_id      String   @id @default(uuid()) @db.Char(36)
  user_id     String   @db.Char(36)
  user        User     @relation(fields: [user_id], references: [user_id])
  action      String   @db.VarChar(100)
  entity_type String   @db.VarChar(50)
  entity_id   String   @db.Char(36)
  details     Json?
  created_at  DateTime @default(now())
}

model Payment {
  payment_id     String                   @id @default(uuid()) @db.Char(36)
  appointment_id String                   @db.Char(36)
  appointment    Appointment              @relation(fields: [appointment_id], references: [appointment_id])
  user_id        String                   @db.Char(36)
  user           User                     @relation(fields: [user_id], references: [user_id])
  amount         Decimal                  @db.Decimal(10, 2)
  payment_method PaymentMethod // Sử dụng ENUM
  status         PaymentTransactionStatus @default(Pending)
  refund_amount  Decimal?                 @db.Decimal(10, 2)
  refund_reason  String?
  order_code     Int                      @unique
  created_at     DateTime                 @default(now())
  updated_at     DateTime                 @updatedAt
  expires_at     DateTime?
  deleted_at     DateTime?
  @@index([appointment_id, status])
  @@index([user_id, status])
  @@index([status, created_at, payment_method]) 
}

model Schedule {
  schedule_id              String            @id @default(uuid()) @db.Char(36)
  consultant_id            String            @db.Char(36)
  consultant               ConsultantProfile @relation(fields: [consultant_id], references: [consultant_id], name: "ConsultantSchedule")
  service_id               String            @db.Char(36)
  service                  Service           @relation(fields: [service_id], references: [service_id], name: "ServiceSchedule")
  start_time               DateTime
  end_time                 DateTime
  is_booked                Boolean           @default(false)
  created_at               DateTime          @default(now())
  deleted_at               DateTime?
  appointment              Appointment?      @relation(name: "AppointmentToSchedule")
  max_appointments_per_day Int?              @default(5) // Giới hạn số lịch hẹn/ngày

  @@index([consultant_id, start_time])
  @@index([service_id])
}

model OtpCode {
  id        String   @id @default(uuid()) @db.Char(36)
  email     String   @db.VarChar(255)
  code      String   @db.Char(6)
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  @@index([email])
}

